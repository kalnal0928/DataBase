# 계층적 모델을 관계형 모델과 네트워크 모델로 변환

## 출제자의 의도
데이터베이스의 3대 전통적 모델:
1. **계층적 모델** (주어진 모델)
2. **네트워크 모델** (변환 대상 1)  
3. **관계형 모델** (변환 대상 2)

## 주어진 데이터
- **고객(고객명, 시, 동)**
- **계좌(계좌번호, 예금액)**

원본 계층적 모델에서 추출한 실제 데이터:
- 이순신 대구 수성동 → 계좌번호: 101, 예금액: 500
- 안중근 서울 신촌 → 계좌번호: 101, 예금액: 500 / 계좌번호: 103, 예금액: 1000
- 김영삼 대전 둔산동 → 계좌번호: 103, 예금액: 1000 / 계좌번호: 105, 예금액: 700

---

## 1. 관계형 모델 (Relational Model)

### 테이블 구조

**고객 (Customer) 테이블**
| 고객명 | 시 | 동 |
|--------|----|----|
| 이순신 | 대구 | 수성동 |
| 안중근 | 서울 | 신촌 |
| 김영삼 | 대전 | 둔산동 |

**계좌 (Account) 테이블**
| 계좌번호 | 고객명 | 예금액 |
|---------|--------|-------|
| 101 | 이순신 | 500 |
| 101 | 안중근 | 500 |
| 103 | 안중근 | 1000 |
| 103 | 김영삼 | 1000 |
| 105 | 김영삼 | 700 |

### 관계 (Relationships)
- 고객 1 : N 계좌 (한 고객은 여러 계좌를 가질 수 있음)
- 외래키: 계좌.고객명 → 고객.고객명

---

## 2. 네트워크 모델 (Network Model)

### 레코드 타입 및 집합 타입

**레코드 타입:**
- 고객 (Customer)
- 계좌 (Account)

**집합 타입 (Set Types):**

```
고객들
├── 고객명: 이순신, 시: 대구, 동: 수성동
├── 고객명: 안중근, 시: 서울, 동: 신촌
└── 고객명: 김영삼, 시: 대전, 동: 둔산동

계좌들
├── 계좌번호: 101, 예금액: 500
├── 계좌번호: 101, 예금액: 500
├── 계좌번호: 103, 예금액: 1000
├── 계좌번호: 103, 예금액: 1000
└── 계좌번호: 105, 예금액: 700
```

**집합 관계:**
- **CUSTOMER_ACCOUNT** (고객 → 계좌): 1:N

**네트워크 연결:**
- 이순신 ← → 계좌 101(500원)
- 안중근 ← → 계좌 101(500원)
- 안중근 ← → 계좌 103(1000원)
- 김영삼 ← → 계좌 103(1000원)
- 김영삼 ← → 계좌 105(700원)

---

## 모델 비교

| 특징 | 계층적 모델 | 관계형 모델 | 네트워크 모델 |
|------|-------------|-------------|---------------|
| 구조 | 트리 구조 | 테이블 기반 | 그래프 구조 |
| 관계 | 1:N만 가능 | 1:1, 1:N, N:M 모두 가능 | 1:N, N:M 가능 |
| 데이터 중복 | 높음 | 낮음 | 중간 |
| 질의 복잡도 | 높음 | 낮음 | 중간 |
| 유연성 | 낮음 | 높음 | 중간 |

## 장단점

### 관계형 모델
**장점:**
- 데이터 중복 최소화
- SQL을 통한 쉬운 질의
- 데이터 무결성 보장
- 높은 유연성

**단점:**
- 조인 연산으로 인한 성능 저하 가능
- 복잡한 관계 표현 시 여러 테이블 필요

### 네트워크 모델
**장점:**
- 복잡한 관계 표현 가능 (N:M)
- 계층적 모델보다 유연함
- 포인터를 통한 빠른 탐색

**단점:**
- 구조가 복잡함
- 프로그래밍이 어려움
- 표준화 부족